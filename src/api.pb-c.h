/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: api.proto */

#ifndef PROTOBUF_C_api_2eproto__INCLUDED
#define PROTOBUF_C_api_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct DopplerSettings DopplerSettings;
typedef struct FskDemodulationSettings FskDemodulationSettings;
typedef struct FskModulationSettings FskModulationSettings;
typedef struct RxRequest RxRequest;
typedef struct TxRequest TxRequest;
typedef struct Response Response;
typedef struct TxData TxData;


/* --- enums --- */

typedef enum _ModemType {
  MODEM_TYPE__GMSK = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MODEM_TYPE)
} ModemType;
typedef enum _DemodDestination {
  DEMOD_DESTINATION__FILE = 0,
  DEMOD_DESTINATION__SOCKET = 1,
  DEMOD_DESTINATION__BOTH = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DEMOD_DESTINATION)
} DemodDestination;
typedef enum _ResponseStatus {
  RESPONSE_STATUS__SUCCESS = 0,
  RESPONSE_STATUS__FAILURE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RESPONSE_STATUS)
} ResponseStatus;

/* --- messages --- */

struct  DopplerSettings
{
  ProtobufCMessage base;
  size_t n_tle;
  char **tle;
  /*
   *degrees times 10^6
   */
  uint32_t latitude;
  /*
   *degrees times 10^6
   */
  uint32_t longitude;
  /*
   *kilometers times 10^6
   */
  uint32_t altitude;
};
#define DOPPLER_SETTINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&doppler_settings__descriptor) \
    , 0,NULL, 0, 0, 0 }


struct  FskDemodulationSettings
{
  ProtobufCMessage base;
  int64_t demod_fsk_deviation;
  uint32_t demod_fsk_transition_width;
  protobuf_c_boolean demod_fsk_use_dc_block;
};
#define FSK_DEMODULATION_SETTINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fsk_demodulation_settings__descriptor) \
    , 0, 0, 0 }


struct  FskModulationSettings
{
  ProtobufCMessage base;
  int64_t mod_fsk_deviation;
};
#define FSK_MODULATION_SETTINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fsk_modulation_settings__descriptor) \
    , 0 }


struct  RxRequest
{
  ProtobufCMessage base;
  uint64_t rx_center_freq;
  uint64_t rx_sampling_freq;
  protobuf_c_boolean rx_dump_file;
  int64_t rx_offset;
  ModemType demod_type;
  uint32_t demod_baud_rate;
  /*
   * the actual is uint8
   */
  uint32_t demod_decimation;
  DemodDestination demod_destination;
  DopplerSettings *doppler;
  FskDemodulationSettings *fsk_settings;
  char *filename;
};
#define RX_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rx_request__descriptor) \
    , 0, 0, 0, 0, MODEM_TYPE__GMSK, 0, 0, DEMOD_DESTINATION__FILE, NULL, NULL, NULL }


struct  TxRequest
{
  ProtobufCMessage base;
  uint64_t tx_center_freq;
  uint64_t tx_sampling_freq;
  protobuf_c_boolean tx_dump_file;
  int64_t tx_offset;
  ModemType mod_type;
  uint32_t mod_baud_rate;
  DopplerSettings *doppler;
  FskModulationSettings *fsk_settings;
  char *filename;
};
#define TX_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tx_request__descriptor) \
    , 0, 0, 0, 0, MODEM_TYPE__GMSK, 0, NULL, NULL, NULL }


struct  Response
{
  ProtobufCMessage base;
  ResponseStatus status;
  uint32_t details;
};
#define RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&response__descriptor) \
    , RESPONSE_STATUS__SUCCESS, 0 }


struct  TxData
{
  ProtobufCMessage base;
  ProtobufCBinaryData data;
};
#define TX_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tx_data__descriptor) \
    , {0,NULL} }


/* DopplerSettings methods */
void   doppler_settings__init
                     (DopplerSettings         *message);
size_t doppler_settings__get_packed_size
                     (const DopplerSettings   *message);
size_t doppler_settings__pack
                     (const DopplerSettings   *message,
                      uint8_t             *out);
size_t doppler_settings__pack_to_buffer
                     (const DopplerSettings   *message,
                      ProtobufCBuffer     *buffer);
DopplerSettings *
       doppler_settings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   doppler_settings__free_unpacked
                     (DopplerSettings *message,
                      ProtobufCAllocator *allocator);
/* FskDemodulationSettings methods */
void   fsk_demodulation_settings__init
                     (FskDemodulationSettings         *message);
size_t fsk_demodulation_settings__get_packed_size
                     (const FskDemodulationSettings   *message);
size_t fsk_demodulation_settings__pack
                     (const FskDemodulationSettings   *message,
                      uint8_t             *out);
size_t fsk_demodulation_settings__pack_to_buffer
                     (const FskDemodulationSettings   *message,
                      ProtobufCBuffer     *buffer);
FskDemodulationSettings *
       fsk_demodulation_settings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fsk_demodulation_settings__free_unpacked
                     (FskDemodulationSettings *message,
                      ProtobufCAllocator *allocator);
/* FskModulationSettings methods */
void   fsk_modulation_settings__init
                     (FskModulationSettings         *message);
size_t fsk_modulation_settings__get_packed_size
                     (const FskModulationSettings   *message);
size_t fsk_modulation_settings__pack
                     (const FskModulationSettings   *message,
                      uint8_t             *out);
size_t fsk_modulation_settings__pack_to_buffer
                     (const FskModulationSettings   *message,
                      ProtobufCBuffer     *buffer);
FskModulationSettings *
       fsk_modulation_settings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fsk_modulation_settings__free_unpacked
                     (FskModulationSettings *message,
                      ProtobufCAllocator *allocator);
/* RxRequest methods */
void   rx_request__init
                     (RxRequest         *message);
size_t rx_request__get_packed_size
                     (const RxRequest   *message);
size_t rx_request__pack
                     (const RxRequest   *message,
                      uint8_t             *out);
size_t rx_request__pack_to_buffer
                     (const RxRequest   *message,
                      ProtobufCBuffer     *buffer);
RxRequest *
       rx_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rx_request__free_unpacked
                     (RxRequest *message,
                      ProtobufCAllocator *allocator);
/* TxRequest methods */
void   tx_request__init
                     (TxRequest         *message);
size_t tx_request__get_packed_size
                     (const TxRequest   *message);
size_t tx_request__pack
                     (const TxRequest   *message,
                      uint8_t             *out);
size_t tx_request__pack_to_buffer
                     (const TxRequest   *message,
                      ProtobufCBuffer     *buffer);
TxRequest *
       tx_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tx_request__free_unpacked
                     (TxRequest *message,
                      ProtobufCAllocator *allocator);
/* Response methods */
void   response__init
                     (Response         *message);
size_t response__get_packed_size
                     (const Response   *message);
size_t response__pack
                     (const Response   *message,
                      uint8_t             *out);
size_t response__pack_to_buffer
                     (const Response   *message,
                      ProtobufCBuffer     *buffer);
Response *
       response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   response__free_unpacked
                     (Response *message,
                      ProtobufCAllocator *allocator);
/* TxData methods */
void   tx_data__init
                     (TxData         *message);
size_t tx_data__get_packed_size
                     (const TxData   *message);
size_t tx_data__pack
                     (const TxData   *message,
                      uint8_t             *out);
size_t tx_data__pack_to_buffer
                     (const TxData   *message,
                      ProtobufCBuffer     *buffer);
TxData *
       tx_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tx_data__free_unpacked
                     (TxData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DopplerSettings_Closure)
                 (const DopplerSettings *message,
                  void *closure_data);
typedef void (*FskDemodulationSettings_Closure)
                 (const FskDemodulationSettings *message,
                  void *closure_data);
typedef void (*FskModulationSettings_Closure)
                 (const FskModulationSettings *message,
                  void *closure_data);
typedef void (*RxRequest_Closure)
                 (const RxRequest *message,
                  void *closure_data);
typedef void (*TxRequest_Closure)
                 (const TxRequest *message,
                  void *closure_data);
typedef void (*Response_Closure)
                 (const Response *message,
                  void *closure_data);
typedef void (*TxData_Closure)
                 (const TxData *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    modem_type__descriptor;
extern const ProtobufCEnumDescriptor    demod_destination__descriptor;
extern const ProtobufCEnumDescriptor    response_status__descriptor;
extern const ProtobufCMessageDescriptor doppler_settings__descriptor;
extern const ProtobufCMessageDescriptor fsk_demodulation_settings__descriptor;
extern const ProtobufCMessageDescriptor fsk_modulation_settings__descriptor;
extern const ProtobufCMessageDescriptor rx_request__descriptor;
extern const ProtobufCMessageDescriptor tx_request__descriptor;
extern const ProtobufCMessageDescriptor response__descriptor;
extern const ProtobufCMessageDescriptor tx_data__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_api_2eproto__INCLUDED */
